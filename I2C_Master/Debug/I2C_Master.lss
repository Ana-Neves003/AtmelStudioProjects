
I2C_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000812  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ca  00000000  00000000  00000a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033a  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b6  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002d  00000000  00000000  0000184a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001877  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  78:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <I2C_master_init>:
#include <avr/io.h>
#include <util/delay.h>

// Inicializa o I2C como mestre
void I2C_master_init() {
	TWSR = 0x00; // Sem prescaler
  80:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x48; // Configura SCL para 100kHz com F_CPU = 16MHz
  84:	88 e4       	ldi	r24, 0x48	; 72
  86:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = (1 << TWEN); // Habilita o TWI
  8a:	84 e0       	ldi	r24, 0x04	; 4
  8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  90:	08 95       	ret

00000092 <I2C_start>:
}

// Inicia uma comunicação I2C
void I2C_start() {
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
  92:	84 ea       	ldi	r24, 0xA4	; 164
  94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Aguarda a operação
  98:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  9c:	88 23       	and	r24, r24
  9e:	e4 f7       	brge	.-8      	; 0x98 <I2C_start+0x6>
}
  a0:	08 95       	ret

000000a2 <I2C_write>:

// Envia um dado via I2C
void I2C_write(uint8_t data) {
	TWDR = data;
  a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
  a6:	84 e8       	ldi	r24, 0x84	; 132
  a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Aguarda a operação
  ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b0:	88 23       	and	r24, r24
  b2:	e4 f7       	brge	.-8      	; 0xac <I2C_write+0xa>
}
  b4:	08 95       	ret

000000b6 <I2C_stop>:

// Encerra a comunicação I2C
void I2C_stop() {
	TWCR = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT);
  b6:	84 e9       	ldi	r24, 0x94	; 148
  b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (TWCR & (1 << TWSTO)); // Aguarda a finalização
  bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c0:	84 fd       	sbrc	r24, 4
  c2:	fc cf       	rjmp	.-8      	; 0xbc <I2C_stop+0x6>
}
  c4:	08 95       	ret

000000c6 <main>:

int main() {
	I2C_master_init();
  c6:	0e 94 40 00 	call	0x80	; 0x80 <I2C_master_init>
	while (1) {
		I2C_start();
  ca:	0e 94 49 00 	call	0x92	; 0x92 <I2C_start>
		I2C_write(0x20); // Endereço do escravo (0x10) com bit de escrita
  ce:	80 e2       	ldi	r24, 0x20	; 32
  d0:	0e 94 51 00 	call	0xa2	; 0xa2 <I2C_write>
		I2C_write('H');
  d4:	88 e4       	ldi	r24, 0x48	; 72
  d6:	0e 94 51 00 	call	0xa2	; 0xa2 <I2C_write>
		I2C_write('e');
  da:	85 e6       	ldi	r24, 0x65	; 101
  dc:	0e 94 51 00 	call	0xa2	; 0xa2 <I2C_write>
		I2C_write('l');
  e0:	8c e6       	ldi	r24, 0x6C	; 108
  e2:	0e 94 51 00 	call	0xa2	; 0xa2 <I2C_write>
		I2C_write('l');
  e6:	8c e6       	ldi	r24, 0x6C	; 108
  e8:	0e 94 51 00 	call	0xa2	; 0xa2 <I2C_write>
		I2C_write('o');
  ec:	8f e6       	ldi	r24, 0x6F	; 111
  ee:	0e 94 51 00 	call	0xa2	; 0xa2 <I2C_write>
		I2C_write('!');
  f2:	81 e2       	ldi	r24, 0x21	; 33
  f4:	0e 94 51 00 	call	0xa2	; 0xa2 <I2C_write>
		I2C_stop();
  f8:	0e 94 5b 00 	call	0xb6	; 0xb6 <I2C_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f e3       	ldi	r18, 0x3F	; 63
  fe:	8d e0       	ldi	r24, 0x0D	; 13
 100:	93 e0       	ldi	r25, 0x03	; 3
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x3c>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x46>
 10c:	00 00       	nop
 10e:	dd cf       	rjmp	.-70     	; 0xca <main+0x4>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
