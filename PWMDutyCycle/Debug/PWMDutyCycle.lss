
PWMDutyCycle.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000772  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b8  00000000  00000000  00000956  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e9  00000000  00000000  0000100e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000012f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000380  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004a  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001716  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 56 00 	call	0xac	; 0xac <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initPWM>:
#include <avr/io.h>
#include <util/delay.h>

void initPWM() {
	// Configura o Timer2 para Fast PWM (modo 3) em 8 bits
	TCCR2A |= (1 << WGM20) | (1 << WGM21) | (1 << COM2A1);  // Fast PWM, non-inverted output on OC2A (PB3)
  80:	e0 eb       	ldi	r30, 0xB0	; 176
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	83 68       	ori	r24, 0x83	; 131
  88:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS21);  // Prescaler = 8
  8a:	e1 eb       	ldi	r30, 0xB1	; 177
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	82 60       	ori	r24, 0x02	; 2
  92:	80 83       	st	Z, r24
	
	// Configura o pino PB3 (OC2A) como saída
	DDRB |= (1 << PB3);
  94:	84 b1       	in	r24, 0x04	; 4
  96:	88 60       	ori	r24, 0x08	; 8
  98:	84 b9       	out	0x04, r24	; 4
  9a:	08 95       	ret

0000009c <SetPWMOutput>:
}

void SetPWMOutput(int duty) {
	// Define o valor de OCR2A para controlar o ciclo de trabalho do PWM
	OCR2A = duty;
  9c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  a0:	08 95       	ret

000000a2 <Wait>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a2:	80 e8       	ldi	r24, 0x80	; 128
  a4:	9c e0       	ldi	r25, 0x0C	; 12
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <Wait+0x4>
  aa:	08 95       	ret

000000ac <main>:
	_delay_loop_2(3200);  // Delay ajustado para uma mudança suave no brilho
}

int main(void) {
	int brilho = 0;
	initPWM();
  ac:	0e 94 40 00 	call	0x80	; 0x80 <initPWM>
	
	while(1){
		// Aumenta o brilho do LED
		for (brilho = 0; brilho < 255; brilho++) {
  b0:	c0 e0       	ldi	r28, 0x00	; 0
  b2:	d0 e0       	ldi	r29, 0x00	; 0
  b4:	06 c0       	rjmp	.+12     	; 0xc2 <main+0x16>
			SetPWMOutput(brilho);
  b6:	ce 01       	movw	r24, r28
  b8:	0e 94 4e 00 	call	0x9c	; 0x9c <SetPWMOutput>
			Wait();
  bc:	0e 94 51 00 	call	0xa2	; 0xa2 <Wait>
	int brilho = 0;
	initPWM();
	
	while(1){
		// Aumenta o brilho do LED
		for (brilho = 0; brilho < 255; brilho++) {
  c0:	21 96       	adiw	r28, 0x01	; 1
  c2:	cf 3f       	cpi	r28, 0xFF	; 255
  c4:	d1 05       	cpc	r29, r1
  c6:	bc f3       	brlt	.-18     	; 0xb6 <main+0xa>
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d0 e0       	ldi	r29, 0x00	; 0
  cc:	06 c0       	rjmp	.+12     	; 0xda <main+0x2e>
			Wait();
		}
		
		// Diminui o brilho do LED
		for (brilho = 255; brilho > 0; brilho--) {
			SetPWMOutput(brilho);
  ce:	ce 01       	movw	r24, r28
  d0:	0e 94 4e 00 	call	0x9c	; 0x9c <SetPWMOutput>
			Wait();
  d4:	0e 94 51 00 	call	0xa2	; 0xa2 <Wait>
			SetPWMOutput(brilho);
			Wait();
		}
		
		// Diminui o brilho do LED
		for (brilho = 255; brilho > 0; brilho--) {
  d8:	21 97       	sbiw	r28, 0x01	; 1
  da:	1c 16       	cp	r1, r28
  dc:	1d 06       	cpc	r1, r29
  de:	bc f3       	brlt	.-18     	; 0xce <main+0x22>
  e0:	e7 cf       	rjmp	.-50     	; 0xb0 <main+0x4>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
