
AtmelISR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bd  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000633  00000000  00000000  00000891  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000225  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000010ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000358  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000014e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_11>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  78:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Timer1_init>:
#include <avr/io.h>
#include <avr/interrupt.h>

void Timer1_init(void) {
	
	TCCR1B |= (1 << WGM12);  // Configura o Timer 1 no modo CTC (Clear Timer on Compare Match)
  80:	e1 e8       	ldi	r30, 0x81	; 129
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	88 60       	ori	r24, 0x08	; 8
  88:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12) | (1 << CS10);  // Prescaler 1024, ele é usado para reduzir a frequência base do timer
  8a:	80 81       	ld	r24, Z
  8c:	85 60       	ori	r24, 0x05	; 5
  8e:	80 83       	st	Z, r24

	// Valor de comparação para 1 segundo (16MHz / 1024 prescaler)
		OCR1A = 15624; //Gera uma interrupção a cada 1 segundo => 1*15624 = 15624 
  90:	88 e0       	ldi	r24, 0x08	; 8
  92:	9d e3       	ldi	r25, 0x3D	; 61
  94:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  98:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
					   // Para 0,5 segundos => 0,5*15624 = 7812	
					   // Para 2 segundos => 2*15624 = 31248
					   
	// Habilita interrupção para o comparador A
	TIMSK1 |= (1 << OCIE1A); 
  9c:	ef e6       	ldi	r30, 0x6F	; 111
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	80 83       	st	Z, r24
  a6:	08 95       	ret

000000a8 <__vector_11>:
}

//A interrupção é acionada toda vez que o Timer 1 atinge o valor definido em OCR1A
ISR(TIMER1_COMPA_vect) {
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	PORTB ^= (1 << PORTB5); // Alterna o estado do LED
  b6:	95 b1       	in	r25, 0x05	; 5
  b8:	80 e2       	ldi	r24, 0x20	; 32
  ba:	89 27       	eor	r24, r25
  bc:	85 b9       	out	0x05, r24	; 5
}
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <main>:

int main(void) {
	DDRB |= (1 << DDB5); // Pino PB5 (pino do LED) como saída
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	84 b9       	out	0x04, r24	; 4
	Timer1_init(); // Inicialização do Timer 1
  d2:	0e 94 40 00 	call	0x80	; 0x80 <Timer1_init>

	// Habilita interrupções globais
	sei();
  d6:	78 94       	sei
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <main+0xc>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
