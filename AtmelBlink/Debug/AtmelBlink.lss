
AtmelBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a6  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006be  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e1  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001310  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039b  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000af  00000000  00000000  000016ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000179e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initPWM>:
#include <avr/io.h>
#include <util/delay.h>

void initPWM() {
	// Configura o Timer0 para Fast PWM (modo 3), saída não invertida em OC0B (PB5)
	TCCR0A |= (1 << WGM00) | (1 << WGM01) | (1 << COM0B1);  // Fast PWM, não invertido no OC0B
  80:	84 b5       	in	r24, 0x24	; 36
  82:	83 62       	ori	r24, 0x23	; 35
  84:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00);  // Prescaler = 1024
  86:	85 b5       	in	r24, 0x25	; 37
  88:	85 60       	ori	r24, 0x05	; 5
  8a:	85 bd       	out	0x25, r24	; 37

	// Configura PB5 (pino digital 13) como saída
	DDRB |= (1 << PB5);
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	80 62       	ori	r24, 0x20	; 32
  90:	84 b9       	out	0x04, r24	; 4
  92:	08 95       	ret

00000094 <loop>:
}


void loop() {
	for (uint8_t dutyCycle = 0; dutyCycle < 255; dutyCycle++) {
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	08 c0       	rjmp	.+16     	; 0xa8 <loop+0x14>
		OCR0B = dutyCycle; // Set duty cycle
  98:	88 bd       	out	0x28, r24	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	ef e3       	ldi	r30, 0x3F	; 63
  9c:	fc e9       	ldi	r31, 0x9C	; 156
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <loop+0xa>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <loop+0x10>
  a4:	00 00       	nop
	DDRB |= (1 << PB5);
}


void loop() {
	for (uint8_t dutyCycle = 0; dutyCycle < 255; dutyCycle++) {
  a6:	8f 5f       	subi	r24, 0xFF	; 255
  a8:	8f 3f       	cpi	r24, 0xFF	; 255
  aa:	b1 f7       	brne	.-20     	; 0x98 <loop+0x4>
  ac:	08 c0       	rjmp	.+16     	; 0xbe <loop+0x2a>
		OCR0B = dutyCycle; // Set duty cycle
		_delay_ms(10); // Delay for visibility
	}
	for (uint8_t dutyCycle = 255; dutyCycle > 0; dutyCycle--) {
		OCR0B = dutyCycle; // Set duty cycle
  ae:	88 bd       	out	0x28, r24	; 40
  b0:	ef e3       	ldi	r30, 0x3F	; 63
  b2:	fc e9       	ldi	r31, 0x9C	; 156
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <loop+0x20>
  b8:	00 c0       	rjmp	.+0      	; 0xba <loop+0x26>
  ba:	00 00       	nop
void loop() {
	for (uint8_t dutyCycle = 0; dutyCycle < 255; dutyCycle++) {
		OCR0B = dutyCycle; // Set duty cycle
		_delay_ms(10); // Delay for visibility
	}
	for (uint8_t dutyCycle = 255; dutyCycle > 0; dutyCycle--) {
  bc:	81 50       	subi	r24, 0x01	; 1
  be:	81 11       	cpse	r24, r1
  c0:	f6 cf       	rjmp	.-20     	; 0xae <loop+0x1a>
		OCR0B = dutyCycle; // Set duty cycle
		_delay_ms(10); // Delay for visibility
	}
}
  c2:	08 95       	ret

000000c4 <main>:

int main() {
	initPWM();
  c4:	0e 94 40 00 	call	0x80	; 0x80 <initPWM>
	while (1) {
		loop();
  c8:	0e 94 4a 00 	call	0x94	; 0x94 <loop>
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <main+0x4>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
